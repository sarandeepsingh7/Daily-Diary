 Sets in Python
A set is an unordered collection of unique elements. Unlike lists and tuples, sets do not allow duplicate elements, and they do not maintain order. Sets are mutable, meaning you can add or remove elements, but you cannot have duplicate values.

Creating a Set:
You can create a set using curly braces {} or the set() constructor.
  # Creating a set using curly braces
my_set = {1, 2, 3, 4, 5}
print(my_set)  # Output: {1, 2, 3, 4, 5}

# Creating an empty set
empty_set = set()
print(empty_set)  # Output: set()

# Creating a set with duplicate elements
duplicate_set = {1, 2, 2, 3, 3, 4}
print(duplicate_set)  # Output: {1, 2, 3, 4} (duplicates removed)
# Adding elements
my_set = {1, 2, 3}
my_set.add(4)
print(my_set)  # Output: {1, 2, 3, 4}

# Removing elements
my_set.remove(3)  # Removes 3 from the set
print(my_set)  # Output: {1, 2, 4}

# Using discard (doesn't raise an error if the element is not found)
my_set.discard(5)  # Doesn't raise an error, even though 5 is not in the set
print(my_set)  # Output: {1, 2, 4}
 Dictionaries in Python
A dictionary is a collection of key-value pairs. In a dictionary, each key must be unique, but the associated values can be duplicated. Dictionaries are unordered until Python 3.7 (in later versions, they maintain insertion order).

Creating a Dictionary:
Dictionaries are created using curly braces {} with key-value pairs separated by a colon :.
                 # Creating a dictionary
my_dict = {"name": "Alice", "age": 25, "city": "New York"}
print(my_dict)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York'}

# Creating an empty dictionary
empty_dict = {}
print(empty_dict)  # Output: {}

# Creating a dictionary with mixed data types
mixed_dict = {"id": 101, "name": "John", "is_active": True}
print(mixed_dict)  # Output: {'id': 101, 'name': 'John', 'is_active': True}
