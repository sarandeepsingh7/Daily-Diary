In Python, lists are the most flexible and commonly used array-like structure. Lists are mutable, ordered, and can store elements of different types (although arrays in other languages are usually fixed in type). Lists in Python are very versatile and are commonly used for most array-like tasks.

Creating a List:# Creating a list (which acts like an array)
my_list = [1, 2, 3, 4, 5]
print(my_list)  # Output: [1, 2, 3, 4, 5]

# Lists can contain different data types
mixed_list = [1, "hello", 3.14, True]
print(mixed_list)  # Output: [1, 'hello', 3.14, True]

# Accessing list elements (zero-indexed)
print(my_list[0])  # Output: 1
print(my_list[-1]) # Output: 5 (negative index for reverse)

# Modifying list elements
my_list[1] = 10
print(my_list)  # Output: [1, 10, 3, 4, 5]

# Appending an element to the list
my_list.append(6)
print(my_list)  # Output: [1, 10, 3, 4, 5, 6]

# Removing an element from the list
my_list.remove(3)
print(my_list)  # Output: [1, 10, 4, 5, 6]
Creating an Array:
To create an array, you first need to import the array module. Then, you define the type code (which specifies the type of elements in the array) and initialize the array with valueimport array

# Creating an array of integers
arr = array.array('i', [1, 2, 3, 4, 5])
print(arr)  # Output: array('i', [1, 2, 3, 4, 5])

# Creating an array of floats
arr_float = array.array('f', [1.1, 2.2, 3.3])
print(arr_float)  # Output: array('f', [1.1, 2.2, 3.3])
