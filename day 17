 Inheritance in Python
Inheritance allows a class to inherit attributes and methods from another class. This helps to create a hierarchy of classes and allows code reuse.

Example of Inheritance:
python
Copy code
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        raise NotImplementedError("Subclass must implement abstract method")

class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"

class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"

# Creating objects of Dog and Cat
dog = Dog("Buddy")
cat = Cat("Whiskers")

print(dog.speak())  # Output: Buddy says Woof!
print(cat.speak())  # Output: Whiskers says Meow!
In this example, Dog and Cat inherit from the Animal class. The method speak() is overridden in both the Dog and Cat subclasses.

7. Encapsulation (Private and Public Attributes)
Encapsulation is the concept of restricting access to some of an object's attributes or methods. You can make variables "private" by using double underscores (__) at the beginning of the attribute name.

python
Copy code
class BankAccount:
    def __init__(self, owner, balance):
        self.owner = owner        # Public attribute
        self.__balance = balance  # Private attribute

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount > self.__balance:
            print("Insufficient funds")
        else:
            self.__balance -= amount

    def get_balance(self):
        return self.__balance

# Creating a BankAccount object
account = BankAccount("Alice", 1000)

# Accessing public attribute
print(account.owner)  # Output: Alice

# Accessing private attribute will cause an error
# print(account.__balance)  # AttributeError: 'BankAccount' object has no attribute '__balance'

# Correct way to access private attribute (through getter method)
print(account.get_balance())  # Output: 1000
8. Polymorphism
Polymorphism allows different classes to define methods that have the same name, but behave differently depending on the class of the object.

python
Copy code
class Bird:
    def fly(self):
        print("Flying in the sky")

class Airplane:
    def fly(self):
        print("Flying through the clouds")

# Polymorphism: Same method name but different implementations
def make_it_fly(flyable_object):
    flyable_object.fly()

bird = Bird()
plane = Airplane()

make_it_fly(bird)   # Output: Flying in the sky
make_it_fly(plane)  # Output: Flying through the clouds
9. Class Methods and Static Methods
Class methods are methods that are bound to the class, rather than an instance of the class. They can modify class state.
Static methods are independent of both class and instance, and they don't modify the object or class state.
python
Copy code
class MyClass:
    count = 0

    @classmethod
    def increment_count(cls):
        cls.count += 1

    @staticmethod
    def greet():
        print("Hello from MyClass!")

# Calling class method
MyClass.increment_count()
print(MyClass.count)  # Output: 1

# Calling static method
MyClass.greet()  # Output: Hello from MyClass!
10. Destructor (__del__ method)
The destructor method __del__() is called when an object is about to be destroyed. It's useful for cleanup activities.

python
Copy code
class Test:
    def __init__(self):
        print("Object created")

    def __del__(self):
        print("Object destroyed")

# Creating and deleting an object
obj = Test()  # Output: Object created
del obj       # Output: Object destroyed
Summary of Key Concepts:
Class: A blueprint for creating objects.
Object: An instance of a class.
Constructor (__init__): Initializes the attributes of an object when it is created.
Methods: Functions defined inside a class that operate on instances of the class.
Inheritance: Allows one class to inherit attributes and methods from another.
